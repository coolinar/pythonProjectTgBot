import logging
import telebot
import requests
from telebot import types

# –ó–∞–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7129836981:AAHFu8oLtaQZgRk2rAmq0ky0Y92Amo6Jpb8'
bot = telebot.TeleBot(TOKEN)

# API Key –∏ CX –¥–ª—è Google Custom Search
GOOGLE_API_KEY = 'AIzaSyBlK55E7c5Zf3CWE54GHKges7xfjD2klbk'
SEARCH_ENGINE_ID = '360e7dcbfef5c417b'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_results = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Google –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
def search_news(query):
    url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={GOOGLE_API_KEY}&cx={SEARCH_ENGINE_ID}&num=5&sort=date"
    response = requests.get(url)
    if response.status_code == 200:
        results = response.json()
        news_items = []
        for item in results.get('items', []):
            title = item['title']
            link = item['link']
            snippet = item.get('snippet', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ')
            news_items.append({
                'title': title,
                'snippet': snippet,
                'link': link
            })
        return news_items
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {response.status_code}")
        return []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ª–∏—á–Ω—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
@bot.message_handler(commands=['start'])
def start(message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = message.from_user.first_name if message.from_user.first_name else "–¥—Ä—É–≥"

    markup = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton(text='ü™ô –ö—Ä–∏–ø—Ç–æ', callback_data='cryptocurrency')
    button2 = types.InlineKeyboardButton(text='üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', callback_data='technology')
    button3 = types.InlineKeyboardButton(text='üíµ –§–∏–Ω–∞–Ω—Å—ã', callback_data='finance')
    button4 = types.InlineKeyboardButton(text='üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É', callback_data='search_by_keyword')
    markup.add(button1, button2, button3, button4)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.",
        reply_markup=markup
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
def send_news(message, news_items, news_index=0):
    if news_index < len(news_items):
        news = news_items[news_index]
        text = f"<b>{news['title']}</b>\n{news['snippet']}\n<a href='{news['link']}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>\n"

        # –ö–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å" –∏ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
        markup = types.InlineKeyboardMarkup()
        if news_index < len(news_items) - 1:
            next_button = types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å ‚û°Ô∏è', callback_data=f'next_{news_index + 1}')
            markup.add(next_button)
        new_search_button = types.InlineKeyboardButton('üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data='new_search')
        markup.add(new_search_button)

        bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(
    func=lambda call: call.data in ['cryptocurrency', 'technology', 'finance', 'search_by_keyword'])
def handle_callback(call):
    if call.data == 'cryptocurrency':
        query = "cryptocurrency news"
    elif call.data == 'technology':
        query = "technology news"
    elif call.data == 'finance':
        query = "finance news"
    elif call.data == 'search_by_keyword':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        return

    news_items = search_news(query)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
    if news_items:
        user_search_results[call.message.chat.id] = news_items
        send_news(call.message, news_items, news_index=0)
    else:
        bot.send_message(call.message.chat.id, "–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data.startswith('next_'))
def handle_next_news(call):
    news_index = int(call.data.split('_')[1])
    news_items = user_search_results.get(call.message.chat.id, [])

    if news_items:
        send_news(call.message, news_items, news_index=news_index)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
@bot.callback_query_handler(func=lambda call: call.data == 'new_search')
def handle_new_search(call):
    user_name = call.from_user.first_name if call.from_user.first_name else "–¥—Ä—É–≥"
    bot.send_message(call.message.chat.id, f"{user_name}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
@bot.message_handler(func=lambda message: True)
def search_news_by_keyword(message):
    if message.text not in ['–ö—Ä–∏–ø—Ç–æ', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–§–∏–Ω–∞–Ω—Å—ã', '–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É']:
        query = message.text
        news_items = search_news(query)

        if news_items:
            user_search_results[message.chat.id] = news_items
            send_news(message, news_items, news_index=0)
        else:
            bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.polling(none_stop=True)
