import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import requests
from googletrans import Translator

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7129836981:AAHFu8oLtaQZgRk2rAmq0ky0Y92Amo6Jpb8'
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# API Key –∏ CX –¥–ª—è Google Custom Search
GOOGLE_API_KEY = 'AIzaSyBlK55E7c5Zf3CWE54GHKges7xfjD2klbk'
SEARCH_ENGINE_ID = '360e7dcbfef5c417b'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_results = {}
user_language = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
translator = Translator()

# –í–æ–∑–º–æ–∂–Ω—ã–µ —è–∑—ã–∫–∏
LANGUAGES = {
    'ru': '–†—É—Å—Å–∫–∏–π',
    'en': 'English',
    'es': 'Espa√±ol'
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Google –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
def search_news(query):
    url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={GOOGLE_API_KEY}&cx={SEARCH_ENGINE_ID}&num=5&sort=date"
    response = requests.get(url)

    logger.info(f"Request URL: {url}")

    if response.status_code == 200:
        results = response.json()
        logger.info(f"Response from Google API: {results}")

        news_items = [
            {
                'title': item['title'],
                'snippet': item.get('snippet', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ'),
                'link': item['link']
            }
            for item in results.get('items', [])
        ]
        return news_items
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {response.status_code}, {response.text}")
        return []


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
@dp.message_handler(commands=['start'])
async def welcome_message(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton(text='–†—É—Å—Å–∫–∏–π', callback_data='lang_ru'),
        types.InlineKeyboardButton(text='English', callback_data='lang_en'),
        types.InlineKeyboardButton(text='Espa√±ol', callback_data='lang_es'),
    ]
    markup.add(*buttons)

    welcome_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n\nHello! Please choose your language:\n\n¬°Hola! Por favor, elige tu idioma:"
    await bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query_handler(lambda call: call.data.startswith('lang_'))
async def set_language(call: types.CallbackQuery):
    lang_code = call.data.split('_')[1]
    user_language[call.message.chat.id] = lang_code

    descriptions = {
        'ru': "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" \
              "ü™ô –ò—Å–∫–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö\n" \
              "üíª –ò—Å–∫–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n" \
              "üíµ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤\n" \
              "üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ª—é–±–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É",
        'en': "I am a bot for searching news by keywords and categories. Here's what I can do:\n\n" \
              "ü™ô Search for the latest cryptocurrency news\n" \
              "üíª Search for tech news\n" \
              "üíµ Financial updates\n" \
              "üîç Search for news by any keyword",
        'es': "Soy un bot para buscar noticias por palabras clave y categor√≠as. Esto es lo que puedo hacer:\n\n" \
              "ü™ô Buscar noticias de criptomonedas\n" \
              "üíª Buscar noticias tecnol√≥gicas\n" \
              "üíµ Actualizaciones financieras\n" \
              "üîç Buscar noticias por cualquier palabra clave",
    }

    await bot.send_message(call.message.chat.id, descriptions.get(lang_code, descriptions['en']))
    await send_category_options(call)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
async def send_category_options(call: types.CallbackQuery):
    lang = user_language.get(call.message.chat.id, 'en')
    markup = types.InlineKeyboardMarkup(row_width=3)

    category_buttons = {
        'ru': [
            ('ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 'cryptocurrency'),
            ('üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'technology'),
            ('üíµ –§–∏–Ω–∞–Ω—Å—ã', 'finance'),
            ('üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É', 'search_by_keyword'),
        ],
        'en': [
            ('ü™ô Crypto', 'cryptocurrency'),
            ('üíª Tech', 'technology'),
            ('üíµ Finance', 'finance'),
            ('üîç Keyword Search', 'search_by_keyword'),
        ],
        'es': [
            ('ü™ô Criptomonedas', 'cryptocurrency'),
            ('üíª Tecnolog√≠a', 'technology'),
            ('üíµ Finanzas', 'finance'),
            ('üîç B√∫squeda por palabra clave', 'search_by_keyword'),
        ],
    }

    buttons = [types.InlineKeyboardButton(text=text, callback_data=data) for text, data in
               category_buttons.get(lang, category_buttons['en'])]
    markup.add(*buttons[:3])  # –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
    markup.add(buttons[3])  # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–Ω–æ–ø–∫–∞

    text = {
        'ru': "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.",
        'en': "Choose a category or enter a keyword to search for news.",
        'es': "Elige una categor√≠a o ingresa una palabra clave para buscar noticias."
    }

    await bot.send_message(call.message.chat.id, text.get(lang, text['en']), reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏
async def send_news(message, news_items, news_index=0):
    lang = user_language.get(message.chat.id, 'en')
    if news_index < len(news_items):
        news = news_items[news_index]
        title_translated = translator.translate(news['title'], dest=lang).text
        snippet_translated = translator.translate(news['snippet'], dest=lang).text
        text = f"<b>{title_translated}</b>\n{snippet_translated}\n<a href='{news['link']}'>Read more</a>"

        markup = types.InlineKeyboardMarkup()
        if news_index < len(news_items) - 1:
            next_button = types.InlineKeyboardButton('Next News ‚û°Ô∏è', callback_data=f'next_{news_index + 1}')
            markup.add(next_button)
        new_search_button = types.InlineKeyboardButton('üîç New Search', callback_data='new_search')
        markup.add(new_search_button)

        await bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)
    else:
        await bot.send_message(message.chat.id, "No news available.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(lambda call: call.data in ['cryptocurrency', 'technology', 'finance', 'search_by_keyword'])
async def handle_callback(call: types.CallbackQuery):
    query_map = {
        'cryptocurrency': "cryptocurrency news",
        'technology': "technology news",
        'finance': "finance news",
    }

    query = query_map.get(call.data, None)
    if query is None:
        await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    news_items = search_news(query)
    user_search_results[call.message.chat.id] = news_items
    await send_news(call.message, news_items, news_index=0)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"
@dp.callback_query_handler(lambda call: call.data.startswith('next_'))
async def handle_next_news(call: types.CallbackQuery):
    news_index = int(call.data.split('_')[1])
    news_items = user_search_results.get(call.message.chat.id, [])
    await send_news(call.message, news_items, news_index=news_index)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
@dp.callback_query_handler(lambda call: call.data == 'new_search')
async def handle_new_search(call: types.CallbackQuery):
    await send_category_options(call)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
