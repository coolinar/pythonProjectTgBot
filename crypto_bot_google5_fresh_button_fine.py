import logging
import telebot
import requests
from telebot import types

# –ó–∞–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7129836981:AAHFu8oLtaQZgRk2rAmq0ky0Y92Amo6Jpb8'
bot = telebot.TeleBot(TOKEN)

# API Key –∏ CX –¥–ª—è Google Custom Search
GOOGLE_API_KEY = 'AIzaSyBlK55E7c5Zf3CWE54GHKges7xfjD2klbk'
SEARCH_ENGINE_ID = '360e7dcbfef5c417b'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Google –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
def search_news(query):
    url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={GOOGLE_API_KEY}&cx={SEARCH_ENGINE_ID}&num=5&sort=date"
    response = requests.get(url)
    if response.status_code == 200:
        results = response.json()
        news_items = []
        for item in results.get('items', []):
            title = item['title']
            link = item['link']
            snippet = item.get('snippet', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ')
            news_items.append(f"<b>{title}</b>\n{snippet}\n<a href='{link}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>\n")
        return news_items
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {response.status_code}")
        return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton(text='ü™ô –ö—Ä–∏–ø—Ç–æ', callback_data='cryptocurrency')
    button2 = types.InlineKeyboardButton(text='üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', callback_data='technology')
    button3 = types.InlineKeyboardButton(text='üíµ –§–∏–Ω–∞–Ω—Å—ã', callback_data='finance')
    button4 = types.InlineKeyboardButton(text='üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É', callback_data='search_by_keyword')
    markup.add(button1, button2, button3, button4)

    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.",
                     reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(
    func=lambda call: call.data in ['cryptocurrency', 'technology', 'finance', 'search_by_keyword'])
def handle_callback(call):
    if call.data == 'cryptocurrency':
        query = "cryptocurrency news"
    elif call.data == 'technology':
        query = "technology news"
    elif call.data == 'finance':
        query = "finance news"
    elif call.data == 'search_by_keyword':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        return

    news_items = search_news(query)
    if news_items:
        for news in news_items:
            bot.send_message(call.message.chat.id, news, parse_mode='HTML')
    else:
        bot.send_message(call.message.chat.id, "–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
@bot.message_handler(func=lambda message: True)
def search_news_by_keyword(message):
    if message.text not in ['–ö—Ä–∏–ø—Ç–æ', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–§–∏–Ω–∞–Ω—Å—ã', '–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É']:
        query = message.text
        news_items = search_news(query)

        if news_items:
            for news in news_items:
                bot.send_message(message.chat.id, news, parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.polling(none_stop=True)
